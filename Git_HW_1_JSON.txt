JSON
 4. Создать внешний репозиторий c названием JSON.
	На стартовой странице нажать "Creat a new repository" и заполнить неоходимые поля.

 5. Клонировать репозиторий JSON на локальный компьютер.
	git clone <url>

 6. Внутри локального JSON создать файл “new.json”.
	: > new.json

 7. Добавить файл под гит.
	git add new.json

 8. Закоммитить файл.
	git commit -m 'Add new.json"

 9. Отправить файл на внешний GitHub репозиторий.
	git push -u origin main

 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
	nano new.json

 11. Отправить изменения на внешний репозиторий.
	git add new.json
	git commit -m 'Changed a new.json"
	git push -u origin main

 12. Создать файл preferences.json
	: > preferences.json

 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
	nano preferences.json

 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
	nano sklls.json

 15. Отправить сразу 2 файла на внешний репозиторий.
	git add preferences.json sklls.json
	git commit -m 'add preferences.json and sklls.json'
	git push -u origin main

 16. На веб интерфейсе создать файл bug_report.json.
	В броузере на странице проекта нажать "Add file", выбрать "Create new file".
	Заполнить необходимые поля

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	Ввести коммит и нажать "Commit new file"

 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
	В списке файлов нажать на нужный файл, нажать на кнопку "Edit this file"(карандаш). Ввести нужные данные.

 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
	Ввести коммит и нажать "Commit new file"

 20. Синхронизировать внешний и локальный репозиторий JSON
	git pull origin master
